// Protocol:
// Alice creates a preimage secret where hashOfSecret = HASH160(secret).  Sends hashOfSecret to Bob.
// Alice creates tx with AtomicSwap() constraint with a timeout.  Confirms on blockchain.
// Bob creates tx with atomicSwap() constraint with timeout.  Confirms on blockchain.
// Alice spends Bob's transaction, revealing "secret".
// Bob spends Alice's transaction now that he knows "secret".


def atomicSwap(pubkeyA,pubkeyB,hashOfSecret, timeout, @which, @sigA @sigB, @secret)
{
    if (@which)
    {
        OP_CHECKSIGVERIFY(@sigB, pubkeyB)
        OP_HASH160(@secret)
        hashOfSecret
        OP_EQUAL
    }
    else  // Alice is able to recover her funds if Bob does not.
    {
        OP_CHECKSIGVERIFY(@sigA, pubkeyA)
        OP_CHECKLOCKTIMEVERIFY(timeout)
        // we don't op_drop, leaving timeout on the stack which is a positive number so the script evaluates to true
    }
}


scriptify!("main", atomicSwap("nex:pubkeyA", "nex: pubkeyB", hash160!("Staple this battery to the correct horse"), "epochTime+(24*60*60)"))
